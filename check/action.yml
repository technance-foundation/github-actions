name: "Check Workflow"
description: "A reusable GitHub Action for running various checks (lint, prettier, tests, etc.) with pnpm"

inputs:
    node-version:
        description: "The version of Node.js to use"
        default: "20"
    pnpm-version:
        description: "The version of pnpm to use"
        default: "9.0.6"
    check-command:
        description: "The command to run checks (e.g., lint, prettier, test)"
        default: "pnpm run check"
    npm-token:
        description: "NPM token for authenticating to the NPM registry"
        required: true
    working-directory:
        description: "The path in which node commands should execute"
        default: "."

runs:
    using: "composite"
    steps:
        - uses: actions/checkout@v4

        - name: Setup Node.js
          uses: actions/setup-node@v4
          with:
              node-version: ${{ inputs.node-version }}

        - name: Setup pnpm
          id: pnpm-setup
          uses: pnpm/action-setup@v4
          with:
              version: ${{ inputs.pnpm-version }}
              run_install: false

        - name: Get pnpm store directory
          id: pnpm-cache
          shell: bash
          run: |
              echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

        - uses: actions/cache@v4
          name: Initialize pnpm cache
          with:
              path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
              key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/package.json') }}-${{ hashFiles('**/pnpm-lock.yaml') }}
              restore-keys: |
                  ${{ runner.os }}-pnpm-store-${{ hashFiles('**/package.json') }}-
                  ${{ runner.os }}-pnpm-store-

        - name: Authenticate NPM registry
          shell: bash
          run: echo "//registry.npmjs.org/:_authToken=${{ inputs.npm-token }}" > ~/.npmrc

        - name: Install dependencies
          working-directory: ${{ inputs.working-directory }}
          shell: bash
          run: pnpm install --no-frozen-lockfile

        - name: Run checks
          working-directory: ${{ inputs.working-directory }}
          shell: bash
          run: ${{ inputs.check-command }}
